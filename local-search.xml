<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>ADPCM算法</title>
    <link href="/2023/05/26/ADPCM%E7%AE%97%E6%B3%95/"/>
    <url>/2023/05/26/ADPCM%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>ADPCM(Adaptive Differential Pulse Code Modulation, 自适应差分脉冲编码调制) 是一种音频信号数字化编码技术, 音频压缩标准 G.722, G.723, G.726 中都会使用到 ADPCM</p><h2 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h2><h3 id="PCM-脉冲编码调制-Pulse-Code-Modulation"><a href="#PCM-脉冲编码调制-Pulse-Code-Modulation" class="headerlink" title="PCM-脉冲编码调制-Pulse Code Modulation"></a>PCM-脉冲编码调制-Pulse Code Modulation</h3><p>音频输入为 16bit 的有符号整数<br>假设输入样本分别为$s_{i}(1\leq i\leq 12)$</p><ul><li>1024,1000,980,970,970,980,1000,1010,1024,1030,1020,1010 ^c764ad</li></ul><p>那么存储时需要开辟 12*16bit &#x3D; 192bit，需要大量的空间<br>为了减少存储开销，Differential Pulse Code Modulation, 差分脉冲编码调制被提出</p><h3 id="DPCM-差分脉冲编码调制-Differential-Pulse-Code-Modulation"><a href="#DPCM-差分脉冲编码调制-Differential-Pulse-Code-Modulation" class="headerlink" title="DPCM-差分脉冲编码调制-Differential Pulse Code Modulation"></a>DPCM-差分脉冲编码调制-Differential Pulse Code Modulation</h3><p>利用声波的连续性，一般来说，相邻采样值的差值较小，可以用较小的位数来存储<br>可将![[ADPCM算法#^c764ad]]进行差分运算$d_{i}&#x3D;s_{i}-s_{i-1}(s_{0}&#x3D;0)$，上述可编码为</p><ul><li>1024,-24,-20,-10,0,10,20,10,14,6,-10,-10</li></ul><p>若求原来的采样值$s_{i}$，只需$s_{i}&#x3D;\Sigma{d_{i}}$（需要注意的是，DPCM 编码是无损的，也就是可以复原成原来的采样值）<br>大部分情况下，$d_{i}$只需要 4bit 来表示，但是存在一些情况，比如$s_{1}$无法用 4bit 的数值表示，于是 ADPCM 被提出</p><h2 id="正课"><a href="#正课" class="headerlink" title="正课"></a>正课</h2><h3 id="ADPCM-自适应差分脉冲编码调制-Adaptive-Differential-Pulse-Code-Modulation"><a href="#ADPCM-自适应差分脉冲编码调制-Adaptive-Differential-Pulse-Code-Modulation" class="headerlink" title="ADPCM-自适应差分脉冲编码调制-Adaptive Differential Pulse Code Modulation"></a>ADPCM-自适应差分脉冲编码调制-Adaptive Differential Pulse Code Modulation</h3><p>（本文以 IMA-ADPCM 算法实现进行说明）</p><h4 id="主要思想"><a href="#主要思想" class="headerlink" title="主要思想"></a>主要思想</h4><ul><li>利用量化差分值(diffq)取代原有差分值(diff)进行差分运算 ^e8ddfc</li></ul><p>何为量化差分值？</p><h4 id="量化差分值"><a href="#量化差分值" class="headerlink" title="量化差分值"></a>量化差分值</h4><p>由 DPCM 可以看出，差分值具有很大的范围，可以取遍$[-2^{15},2^{15}]$范围内的任何一个整数，无法用 4bit 的值来表示<br>而 ADPCM 的量化差分值是用 4bit 的 ADPCM 代码<strong>code</strong>与一个可变的步长<strong>step</strong>来表示，<strong>假定 step 可在$[0,2^{15}]$中取若干个数，构成一个 StepTable</strong></p><p>现不加说明的给定 code(4bit)各位$\underline{a}\underline{b}\underline{c}\underline{d}$的含义</p><ul><li>a 代表符号，也就是正负</li><li>b 是 1 时，代表 1 倍的 step 步长值</li><li>c 是 1 时，代表 0.5 倍的 step 步长值</li><li>d 是 1 时，代表 0.25 倍的 step 步长值<br>举个例子：<br>$code&#x3D;(7)<em>{10}&#x3D;(0111)</em>{2}$，代表 code 是正数，对应$1\times1+0.5\times1+0.25\times1&#x3D;1.75倍$的步长值<br>$code&#x3D;(5)<em>{10}&#x3D;(1001)</em>{2}$，代表 code 是负数，对应$-(1\times0+0.5\times0+0.25\times1)&#x3D;-0.25倍$的步长值</li></ul><p>而量化差分值的计算方法是$diffq&#x3D;code对应步长值的倍数\times当前的step步长值+1&#x2F;8的步长值$<br>（注：1&#x2F;8 的步长值是 IMA ADPCM 算法规定的，不同实现算法这部分不同）<br>这么计算之后，diffq 也可以取遍$[-2^{15},2^{15}]$的很大一部分数值，同时 diffq 只需要 4bit 的值与一个 step 值便可以计算出来，与 diff 的 16bit 相比，减小了很大的存储空间</p><p>现在回顾主要思想![[ADPCM算法#^e8ddfc]]<br>既然要取代，我们就应该尽可能在当前的 step 下，尽可能的让 diffq 接近 diff 值<br>如何实现呢？</p><h4 id="让-diffq-接近-diff"><a href="#让-diffq-接近-diff" class="headerlink" title="让 diffq 接近 diff"></a>让 diffq 接近 diff</h4><p>首先，diffq 应该要与 diff 有相同的符号，也就是说，$diff&lt;0时，diffq&lt;0$,那么 code 的第一位($a$)应该是 0，否则是 1</p><p>在当前 step 下，如果 diff 值大于一倍步长，那么为了让 diffq 尽可能靠近 diff，那么 diffq 值也应该大于一倍步长，根据 diffq 的计算方式，那么 code 的第二位($b$)应该是 1，否则 code 的第二位是 0<br>接下来将 diff 减去当前 step 值，如果这时候 diff 大于 0.5 倍步长，那么同理 code 的第三位($c$)应该是 1，否则是 0<br>接下来将 diff 减去 0.5 倍 step 值，如果这时候 diff 大于 0.25 倍步长，那么同理 code 的第四位($d$)应该是 1，否则是 0<br>这样，我们就得到了在当前 step 下最接近 diff 值的 diffq 的值，同时求出了 code 值</p><p>一个问题：<br>这样计算出来的 diffq 的绝对值的范围大致在 2 倍 step 范围内，假如此时的 diff 的绝对值远大于 step 值，要怎么办？<br>这就对每次选取的 step 值有着一定的要求</p><h4 id="step-步长的选定"><a href="#step-步长的选定" class="headerlink" title="step 步长的选定"></a>step 步长的选定</h4><p>我们可以进行大胆的假定，假如这次的 diff 值远大于步长值，那么下一个采样值的 diff 值应该也是远大于这次的步长值，那么为了减小误差，我们就应该让下一次的步长值扩大 ^ce108a</p><p>我们定义一个 index 值，用于选取 step 值<br>其中 index 与 code 与 step 的关系应该满足：</p><ul><li>当 index 变大的时候，step 对应变大；index 变小的时候，step 对应变小</li><li>当 code 大于 4 或者小于-4 的时候，也就是 diff 的绝对值大于 1 倍步长的时候，index 应该变大，这样可以使 step 变大<br>总结一下，index 受到 code 的影响，而 step 受到 index 的影响</li></ul><p>我们观察 IMA-ADPCM 给定的 index 和 step 表(<strong>注意 IMA-ADPCM 中 index 是 8bit 整数</strong>)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* Table of index changes */</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> IndexTable[<span class="hljs-number">16</span>] = &#123;<br>    <span class="hljs-number">0xff</span>, <span class="hljs-number">0xff</span>, <span class="hljs-number">0xff</span>, <span class="hljs-number">0xff</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>,<br>    <span class="hljs-number">0xff</span>, <span class="hljs-number">0xff</span>, <span class="hljs-number">0xff</span>, <span class="hljs-number">0xff</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>&#125;;<br><span class="hljs-comment">/* Quantizer step size lookup table */</span><br><span class="hljs-type">const</span> <span class="hljs-type">long</span> StepTable[<span class="hljs-number">89</span>] = &#123;<br>    <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">16</span>, <span class="hljs-number">17</span>,<br>    <span class="hljs-number">19</span>, <span class="hljs-number">21</span>, <span class="hljs-number">23</span>, <span class="hljs-number">25</span>, <span class="hljs-number">28</span>, <span class="hljs-number">31</span>, <span class="hljs-number">34</span>, <span class="hljs-number">37</span>, <span class="hljs-number">41</span>, <span class="hljs-number">45</span>,<br>    <span class="hljs-number">50</span>, <span class="hljs-number">55</span>, <span class="hljs-number">60</span>, <span class="hljs-number">66</span>, <span class="hljs-number">73</span>, <span class="hljs-number">80</span>, <span class="hljs-number">88</span>, <span class="hljs-number">97</span>, <span class="hljs-number">107</span>, <span class="hljs-number">118</span>,<br>    <span class="hljs-number">130</span>, <span class="hljs-number">143</span>, <span class="hljs-number">157</span>, <span class="hljs-number">173</span>, <span class="hljs-number">190</span>, <span class="hljs-number">209</span>, <span class="hljs-number">230</span>, <span class="hljs-number">253</span>, <span class="hljs-number">279</span>, <span class="hljs-number">307</span>,<br>    <span class="hljs-number">337</span>, <span class="hljs-number">371</span>, <span class="hljs-number">408</span>, <span class="hljs-number">449</span>, <span class="hljs-number">494</span>, <span class="hljs-number">544</span>, <span class="hljs-number">598</span>, <span class="hljs-number">658</span>, <span class="hljs-number">724</span>, <span class="hljs-number">796</span>,<br>    <span class="hljs-number">876</span>, <span class="hljs-number">963</span>, <span class="hljs-number">1060</span>, <span class="hljs-number">1166</span>, <span class="hljs-number">1282</span>, <span class="hljs-number">1411</span>, <span class="hljs-number">1552</span>, <span class="hljs-number">1707</span>, <span class="hljs-number">1878</span>, <span class="hljs-number">2066</span>,<br>    <span class="hljs-number">2272</span>, <span class="hljs-number">2499</span>, <span class="hljs-number">2749</span>, <span class="hljs-number">3024</span>, <span class="hljs-number">3327</span>, <span class="hljs-number">3660</span>, <span class="hljs-number">4026</span>, <span class="hljs-number">4428</span>, <span class="hljs-number">4871</span>, <span class="hljs-number">5358</span>,<br>    <span class="hljs-number">5894</span>, <span class="hljs-number">6484</span>, <span class="hljs-number">7132</span>, <span class="hljs-number">7845</span>, <span class="hljs-number">8630</span>, <span class="hljs-number">9493</span>, <span class="hljs-number">10442</span>, <span class="hljs-number">11487</span>, <span class="hljs-number">12635</span>, <span class="hljs-number">13899</span>,<br>    <span class="hljs-number">15289</span>, <span class="hljs-number">16818</span>, <span class="hljs-number">18500</span>, <span class="hljs-number">20350</span>, <span class="hljs-number">22385</span>, <span class="hljs-number">24623</span>, <span class="hljs-number">27086</span>, <span class="hljs-number">29794</span>, <span class="hljs-number">32767</span>&#125;;<br></code></pre></td></tr></table></figure><p>step 表随着下标的增加而增加<br>index 表在 code 为 0<del>3 与-3</del>0 的时候为 0xff，其余为 2，4，6，8<br>我们令<br><code>index = index + IndexTable[code]</code><br><code>step = StepTable[index]</code><br>code 为 0<del>3 与-3</del>0 时，$index&#x3D;index+0xff$,由于 index 是 8bit 数据，必然会溢出，溢出之后得到的数据相当于 index-1，此时对应的 step 值变小<br>code 大于 4 或者小于-4 时，index 加上了一个大于 0 的数，使 index 变大，此时对应的 step 值变大，符合要求<br>注意，这些 step 与 index 是在当前采样值下计算的，是在下一次的采样值下使用的![[ADPCM算法#^ce108a]]<br>现在 step 也解决了，也编码完了，如何解码呢</p><h4 id="解码"><a href="#解码" class="headerlink" title="解码"></a>解码</h4><p>同 DPCM 原理一样，通过计算量化差分值的和，得到解码数据<br>不过，此时得到的数据与原数据是有差异的，故而 ADPCM 是有损压缩</p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-comment">/* Table of index changes */</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> IndexTable[<span class="hljs-number">16</span>] = &#123;<br>    <span class="hljs-number">0xff</span>, <span class="hljs-number">0xff</span>, <span class="hljs-number">0xff</span>, <span class="hljs-number">0xff</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>,<br>    <span class="hljs-number">0xff</span>, <span class="hljs-number">0xff</span>, <span class="hljs-number">0xff</span>, <span class="hljs-number">0xff</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>&#125;;<br><span class="hljs-comment">/* Quantizer step size lookup table */</span><br><span class="hljs-type">const</span> <span class="hljs-type">long</span> StepSizeTable[<span class="hljs-number">89</span>] = &#123;<br>    <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">16</span>, <span class="hljs-number">17</span>,<br>    <span class="hljs-number">19</span>, <span class="hljs-number">21</span>, <span class="hljs-number">23</span>, <span class="hljs-number">25</span>, <span class="hljs-number">28</span>, <span class="hljs-number">31</span>, <span class="hljs-number">34</span>, <span class="hljs-number">37</span>, <span class="hljs-number">41</span>, <span class="hljs-number">45</span>,<br>    <span class="hljs-number">50</span>, <span class="hljs-number">55</span>, <span class="hljs-number">60</span>, <span class="hljs-number">66</span>, <span class="hljs-number">73</span>, <span class="hljs-number">80</span>, <span class="hljs-number">88</span>, <span class="hljs-number">97</span>, <span class="hljs-number">107</span>, <span class="hljs-number">118</span>,<br>    <span class="hljs-number">130</span>, <span class="hljs-number">143</span>, <span class="hljs-number">157</span>, <span class="hljs-number">173</span>, <span class="hljs-number">190</span>, <span class="hljs-number">209</span>, <span class="hljs-number">230</span>, <span class="hljs-number">253</span>, <span class="hljs-number">279</span>, <span class="hljs-number">307</span>,<br>    <span class="hljs-number">337</span>, <span class="hljs-number">371</span>, <span class="hljs-number">408</span>, <span class="hljs-number">449</span>, <span class="hljs-number">494</span>, <span class="hljs-number">544</span>, <span class="hljs-number">598</span>, <span class="hljs-number">658</span>, <span class="hljs-number">724</span>, <span class="hljs-number">796</span>,<br>    <span class="hljs-number">876</span>, <span class="hljs-number">963</span>, <span class="hljs-number">1060</span>, <span class="hljs-number">1166</span>, <span class="hljs-number">1282</span>, <span class="hljs-number">1411</span>, <span class="hljs-number">1552</span>, <span class="hljs-number">1707</span>, <span class="hljs-number">1878</span>, <span class="hljs-number">2066</span>,<br>    <span class="hljs-number">2272</span>, <span class="hljs-number">2499</span>, <span class="hljs-number">2749</span>, <span class="hljs-number">3024</span>, <span class="hljs-number">3327</span>, <span class="hljs-number">3660</span>, <span class="hljs-number">4026</span>, <span class="hljs-number">4428</span>, <span class="hljs-number">4871</span>, <span class="hljs-number">5358</span>,<br>    <span class="hljs-number">5894</span>, <span class="hljs-number">6484</span>, <span class="hljs-number">7132</span>, <span class="hljs-number">7845</span>, <span class="hljs-number">8630</span>, <span class="hljs-number">9493</span>, <span class="hljs-number">10442</span>, <span class="hljs-number">11487</span>, <span class="hljs-number">12635</span>, <span class="hljs-number">13899</span>,<br>    <span class="hljs-number">15289</span>, <span class="hljs-number">16818</span>, <span class="hljs-number">18500</span>, <span class="hljs-number">20350</span>, <span class="hljs-number">22385</span>, <span class="hljs-number">24623</span>, <span class="hljs-number">27086</span>, <span class="hljs-number">29794</span>, <span class="hljs-number">32767</span>&#125;;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ADPCM_Data</span><br>&#123;<br>    <span class="hljs-type">int</span> index;<br>    <span class="hljs-type">int</span> sample;<br>&#125;;<br><br>ADPCM_Data prevSample = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;; <span class="hljs-comment">// 前一个数据，初始均为0，0，通过前一个数据计算的index值与采样值，来计算当前采样值的step值</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">code代表着量化差分值是几倍的步长，</span><br><span class="hljs-comment">0000-1111</span><br><span class="hljs-comment">4位</span><br><span class="hljs-comment">从左到右，第一位是符号位，代表量化差分值的正负</span><br><span class="hljs-comment">第二位是数值位，代表量化差分值的绝对值是步长的1倍或者0倍</span><br><span class="hljs-comment">第三位是数值位，代表量化差分值的绝对值是1/2步长的1倍或者0倍</span><br><span class="hljs-comment">第四位是数值位，代表量化差分值的绝对值是1/4步长的1倍或者0倍</span><br><span class="hljs-comment">量化差分值默认有step的1/8（具体原因我也不知道...也许是1/4step的0与1的统计平均值，所以取1/8step）</span><br><span class="hljs-comment">也就是diffq（也就是量化差分值）只能是step的+-(0,0.25,0.5,0.75,1,1.25,1.5,1.75)+0.125的倍数</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">diff差分值与diffq量化差分值的关系</span><br><span class="hljs-comment">diffq在精度允许情况下，可以看作diff（压缩损失由来）</span><br><span class="hljs-comment">diffq只能是step的某个倍数，而diff则可以随意取</span><br><span class="hljs-comment">diffq则是在step的倍数中的一个尽可能接近diff的一个数</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">若code大于4或者小于-4时，说明差分值大于1倍的步长，我们可以预测下一次的差分也是大概率大于1倍步长，</span><br><span class="hljs-comment">因此我们应该变大步长值，在index = IndexTable[code]可以看出</span><br><span class="hljs-comment">1. code在0-3（对应差分值是步长的1/8倍到1.125倍之间）或者8-11（对应差分值是步长的-1/8倍到-1.125倍之间）时，</span><br><span class="hljs-comment">也就是这时候差分值的绝对值是小于等于一倍的步长时，也就是说步长可能大了一点点，</span><br><span class="hljs-comment">IndexTable为0xff，index（8位无符号数）加上0xff，必然导致溢出，</span><br><span class="hljs-comment">由二进制的知识可以知道，溢出后得到的值实际上就是index-1,这样使步长略微减小，保持在1倍附近</span><br><span class="hljs-comment">2. code在4-7（对应差分值是步长的1.125倍到1.875倍之间时）或者12-15（对应差分值是步长的-1.125倍到-1.875倍之间时）</span><br><span class="hljs-comment">也就是这时候差分值的绝对值大于一倍步长的时候，也就是说步长可能小了一点点</span><br><span class="hljs-comment">IndexTable是2，4，6，8，这样使index变大，使得下一次的step值扩大</span><br><span class="hljs-comment">这样使下一次的差分值保持在1倍附近</span><br><span class="hljs-comment">这应该就是IndexTable与StepSizeTable构造原理</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">ADPCM_Encoder</span><span class="hljs-params">(<span class="hljs-type">int</span> sample)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> code = <span class="hljs-number">0</span>;<br>   <br>    <span class="hljs-type">int</span> predSample = prevSample.sample; <span class="hljs-comment">// 获取之前的采样数据，16bit</span><br>    <span class="hljs-type">int</span> index = prevSample.index;       <span class="hljs-comment">// 获取之前的index值，8bit无符号整数</span><br><br>    <span class="hljs-type">int</span> step = StepSizeTable[index]; <span class="hljs-comment">// 获取步长</span><br><br>    <span class="hljs-type">int</span> diff = sample - prevSample.sample; <span class="hljs-comment">// 获取当前样本值和上一个样本值的差分数值</span><br><br>    <span class="hljs-keyword">if</span> (diff &gt; <span class="hljs-number">0</span>) <span class="hljs-comment">// 差分大于0，则code符号位不需要改变</span><br>        code = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-comment">// 差分值小于0，code修改符号位，也就是和2进制的(100)进行或运算，也就是和10进制的(8)进行或运算</span><br>    &#123;<br>        code |= <span class="hljs-number">8</span>;    <span class="hljs-comment">// 改变符号位</span><br>        diff = -diff; <span class="hljs-comment">// diff变成正的</span><br>    &#125;<br><br>    <span class="hljs-type">int</span> tempstep = step;<br><br>    <span class="hljs-keyword">if</span> (diff &gt;= tempstep) <span class="hljs-comment">// diff大于1倍步长的话</span><br>    &#123;<br>        diff -= tempstep; <span class="hljs-comment">// 减去步长，获取剩余的差分值</span><br>        code |= <span class="hljs-number">4</span>;        <span class="hljs-comment">// 修改第二位为1</span><br>    &#125;<br>    tempstep &gt;&gt;= <span class="hljs-number">1</span>; <span class="hljs-comment">// 步长变为原来的一半</span><br><br>    <span class="hljs-keyword">if</span> (diff &gt;= tempstep) <span class="hljs-comment">// diff仍大于0.5倍步长的话</span><br>    &#123;<br>        diff -= tempstep; <span class="hljs-comment">// 减去步长，获取剩余的差分值</span><br>        code |= <span class="hljs-number">2</span>;        <span class="hljs-comment">// 修改第二位为1</span><br>    &#125;<br>    tempstep &gt;&gt;= <span class="hljs-number">1</span>; <span class="hljs-comment">// 步长变为原来的一半</span><br><br>    <span class="hljs-keyword">if</span> (diff &gt;= tempstep) <span class="hljs-comment">// diff仍大于0.25倍步长的话</span><br>    &#123;<br>        diff -= tempstep; <span class="hljs-comment">// 减去步长，获取剩余的差分值</span><br>        code |= <span class="hljs-number">1</span>;        <span class="hljs-comment">// 修改第一位为1</span><br>    &#125;<br><br>    <span class="hljs-type">int</span> diffq = step &gt;&gt; <span class="hljs-number">3</span>; <span class="hljs-comment">// 量化差分值，默认有1/8的步长</span><br>    <span class="hljs-keyword">if</span> (code &amp; <span class="hljs-number">4</span>)          <span class="hljs-comment">// 如果差分值大于步长的一倍，量化差分值加上步长的1倍</span><br>    &#123;<br>        diffq += step;<br>    &#125;<br>   <br>    step &gt;&gt;= <span class="hljs-number">1</span>;   <span class="hljs-comment">// 步长变为原来的一半</span><br>   <br>    <span class="hljs-keyword">if</span> (code &amp; <span class="hljs-number">2</span>) <span class="hljs-comment">// 如果差分值大于步长的0.5倍，量化差分值加上步长的0.5倍</span><br>    &#123;<br>        diffq += step;<br>    &#125;<br>    step &gt;&gt;= <span class="hljs-number">1</span>;   <span class="hljs-comment">// 步长变为原来的一半</span><br>    <span class="hljs-keyword">if</span> (code &amp; <span class="hljs-number">1</span>) <span class="hljs-comment">// 如果差分值大于步长的0.25倍，量化差分值加上步长的0.25倍</span><br>    &#123;<br>        diffq += step;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (code &amp; <span class="hljs-number">8</span>) <span class="hljs-comment">// 符号位是1，说明量化差分值是负的，预测值也就减去diffq</span><br>        predSample -= diffq;<br>    <span class="hljs-keyword">else</span> <span class="hljs-comment">// 符号位是0，说明量化差分值是正的，预测值也就加上diffq</span><br>        predSample += diffq;<br><br>    <span class="hljs-comment">// 处理数据溢出</span><br>    <span class="hljs-keyword">if</span> (predSample &gt; <span class="hljs-number">32767</span>)<br>        predSample = <span class="hljs-number">32767</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (predSample &lt; <span class="hljs-number">-32767</span>)<br>        predSample = <span class="hljs-number">-32767</span>;<br><br>    index += IndexTable[code];<br>    <span class="hljs-keyword">if</span> (index &lt; <span class="hljs-number">0</span>)<br>        index = <span class="hljs-number">0</span>;<br>    index &amp;= <span class="hljs-number">0xff</span>; <span class="hljs-comment">// 舍弃高位溢出，本质是因为我定义了index是32位整数，手动&amp;0xff，舍弃高位数字</span><br>    <span class="hljs-keyword">if</span> (index &gt; <span class="hljs-number">88</span>)<br>        index = <span class="hljs-number">88</span>;<br><br>    <span class="hljs-comment">// 此为数据已经decode完毕，更新prevSample</span><br>    prevSample.sample = predSample;<br>    prevSample.index = index;<br><br>    <span class="hljs-keyword">return</span> (code &amp; <span class="hljs-number">0x0f</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">ADPCM_Decoder</span><span class="hljs-params">(<span class="hljs-type">int</span> code)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> predSample = prevSample.sample; <span class="hljs-comment">// 获取之前的采样值</span><br>    <span class="hljs-type">int</span> index = prevSample.index;       <span class="hljs-comment">// 获取之前的index值</span><br><br>    <span class="hljs-type">int</span> step = StepSizeTable[index]; <span class="hljs-comment">// 获取步长</span><br><br>    <span class="hljs-type">int</span> diffq = step &gt;&gt; <span class="hljs-number">3</span>; <span class="hljs-comment">// 量化差分值带有默认的1/8步长</span><br>    <span class="hljs-keyword">if</span> (code &amp; <span class="hljs-number">4</span>)          <span class="hljs-comment">// 如果code的二进制的第二位是1，也就是code&amp;4是1，说明量化差分值是大于一倍步长</span><br>        diffq += step;     <span class="hljs-comment">// 加上步长</span><br>    step &gt;&gt;= <span class="hljs-number">1</span>;            <span class="hljs-comment">// 步长减半</span><br>    <span class="hljs-keyword">if</span> (code &amp; <span class="hljs-number">2</span>)          <span class="hljs-comment">// 如果code的二进制的第三位是1，也就是code&amp;2是1，说明量化差分值是大于0.5倍步长</span><br>        diffq += step;     <span class="hljs-comment">// 加上步长</span><br>    step &gt;&gt;= <span class="hljs-number">1</span>;            <span class="hljs-comment">// 步长减半</span><br>    <span class="hljs-keyword">if</span> (code &amp; <span class="hljs-number">1</span>)          <span class="hljs-comment">// 如果code的二进制的第四位是1，也就是code&amp;1是1，说明量化差分值是大于0.25倍步长</span><br>        diffq += step;     <span class="hljs-comment">// 加上步长</span><br><br>    <span class="hljs-keyword">if</span> (code &amp; <span class="hljs-number">8</span>)            <span class="hljs-comment">// 如果符号位是1，说明量化差分值是负数</span><br>        predSample -= diffq; <span class="hljs-comment">// 减去量化差分值</span><br>    <span class="hljs-keyword">else</span>                     <span class="hljs-comment">// 否则</span><br>        predSample += diffq; <span class="hljs-comment">// 加上量化差分值</span><br>   <br>    <span class="hljs-comment">// 处理数据溢出</span><br>    <span class="hljs-keyword">if</span> (predSample &gt; <span class="hljs-number">32767</span>)<br>        predSample = <span class="hljs-number">32767</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (predSample &lt; <span class="hljs-number">-32767</span>)<br>        predSample = <span class="hljs-number">-32767</span>;<br><br>    index += IndexTable[code];<br><br>    <span class="hljs-keyword">if</span> (index &lt; <span class="hljs-number">0</span>)<br>        index = <span class="hljs-number">0</span>;<br>    index &amp;= <span class="hljs-number">0xff</span>;<br>    <span class="hljs-keyword">if</span> (index &gt; <span class="hljs-number">88</span>)<br>        index = <span class="hljs-number">88</span>;<br><br>    <span class="hljs-comment">// 此为数据已经encode完毕，更新prevSample</span><br>    prevSample.sample = predSample;<br>    prevSample.index = index;<br><br>    <span class="hljs-keyword">return</span> predSample;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> sample[<span class="hljs-number">16</span>] = &#123;<span class="hljs-number">0x0010</span>,<br>                      <span class="hljs-number">0x0020</span>,<br>                      <span class="hljs-number">0x0030</span>,<br>                      <span class="hljs-number">0x0040</span>,<br>                      <span class="hljs-number">0x0050</span>,<br>                      <span class="hljs-number">0x0050</span>,<br>                      <span class="hljs-number">0x0050</span>,<br>                      <span class="hljs-number">0x0040</span>,<br>                      <span class="hljs-number">0x0400</span>,<br>                      <span class="hljs-number">0x0400</span>,<br>                      <span class="hljs-number">0x0400</span>,<br>                      <span class="hljs-number">0x0400</span>,<br>                      <span class="hljs-number">0x0400</span>,<br>                      <span class="hljs-number">0x0400</span>,<br>                      <span class="hljs-number">0x0400</span>,<br>                      <span class="hljs-number">0x0400</span>&#125;;<br>    <span class="hljs-type">int</span> EncodeSample[<span class="hljs-number">16</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">16</span>; i++)<br>    &#123;<br>        EncodeSample[i] = <span class="hljs-built_in">ADPCM_Encoder</span>(sample[i]);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;, code:%d\n&quot;</span>, EncodeSample[i]);<br>    &#125;<br>    prevSample = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-type">int</span> DecodeSample[<span class="hljs-number">16</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">16</span>; i++)<br>    &#123;<br>        DecodeSample[i] = <span class="hljs-built_in">ADPCM_Decoder</span>(EncodeSample[i]);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%x &quot;</span>, DecodeSample[i]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法学习</tag>
      
      <tag>ADPCM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/05/23/hello-world/"/>
    <url>/2023/05/23/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
